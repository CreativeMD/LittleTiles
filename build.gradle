plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'com.diffplug.eclipse.apt'
    id 'org.spongepowered.mixin'
    id 'com.modrinth.minotaur' version '2.+'
    id 'com.matthewprenger.cursegradle' version '1.4+'
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://maven.blamejared.com"
    }
}

group= "team.creative" + project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

project.evaluationDependsOn(":CreativeCore")

java.sourceSets.create("api") {
    
    java {
        srcDir("src/api/java")
    }
    compileClasspath += sourceSets.main.compileClasspath
    runtimeClasspath += sourceSets.main.runtimeClasspath
}

sourceSets.main.compileClasspath += sourceSets.api.output
sourceSets.main.runtimeClasspath += sourceSets.api.output

minecraft {
    mappings channel: 'official', version: "${project.property 'minecraft_version'}"
    
    runs {
        client {
            taskName "littletiles_client"
            workingDirectory project.file('run')
            
			property 'forge.logging.console.level', 'debug'
			arg '--mixin.config'
			arg 'creativecore.mixins.json'
			arg '--mixin.config'
			arg 'creativecore.forge.mixins.json'

            mods {
				creativecore {
                    source project(':CreativeCore').sourceSets.main
                }
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            taskName "littletiles_server"
            workingDirectory project.file('run')
			
			property 'forge.logging.console.level', 'debug'
            arg '--mixin.config'
            arg 'creativecore.mixins.json'
            arg '--mixin.config'
            arg 'creativecore.forge.mixins.json'
            
            mods {
                creativecore {
                    source project(':CreativeCore').sourceSets.main
                }
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraftLibrary fg.deobf("curse.maven:oculus-581495:5299671")
    implementation fg.deobf("org.embeddedt:embeddium-1.20.1:0.3.20-git-b21cfd8+mc1.20.1")
    
    minecraft "net.minecraftforge:forge:${project.property 'minecraft_version'}-${project.property 'forge_version'}"
    
    implementation project(':CreativeCore')
    
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1")) {
        jarJar.ranged(it, "[0.4.1,)")
    }
}

modDependencies = [
    [ modId: "creativecore", mandatory: true, ordering: "NONE", side: "BOTH", versionRange: "[" + creativecore_version + ",)" ]
]

tasks.named('jarJar') {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    archiveFileName.set(project.mod_name + "_" + project.mod_release_suffix + "_v" + project.mod_version + "_mc" + project.minecraft_version + ".jar")
    manifest {
        attributes([
            "Specification-Title": project.mod_name,
            "Specification-Vendor": "CreativeMD",
            "Specification-Version": project.mod_version,
            "Implementation-Title": project.mod_name,
            "Implementation-Version"  : project.mod_version,
            "Implementation-Vendor": "CreativeMD",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

mixin {
    add sourceSets.main, 'littletiles.mixins.refmap.json'
     
    config 'littletiles.mixins.json'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

String getChangelogText() {
    String result = ''
    boolean first = true
    file('changelog.txt').readLines().find {
        if (first) {
            if (it.equals(project.mod_version)) {
                first = false
            }
            return false
        } else if (!it?.trim()) {
            return true
        } else {
            result += "* " + it + "\n"
            return false
        }
    }
    
    return result
}

task upload(type: GradleBuild) {
    description 'Uploads new version to modrinth and curseforge.'
    group = 'publishing'
    tasks = ['modrinth', 'curseforge']
}

gradle.taskGraph.whenReady {
    if (it.hasTask(tasks.modrinth) || it.hasTask(tasks.curseforge)) {
        if (!getChangelogText()?.trim()) {
            throw new GradleException('No changelog provided')
        }
    }
}

tasks.modrinth.enabled = System.getenv("MODRINTH_TOKEN") != null
tasks.modrinth.group = 'publishing'
modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.mod_id
    versionNumber = project.mod_version
    versionType = project.release_type
    uploadFile = tasks.named('jarJar')
    gameVersions = [ project.minecraft_version ]
    changelog = getChangelogText()
    loaders = [ "forge", "neoforge" ]
    dependencies {
        required.project "creativecore"
    }
}

tasks.curseforge.enabled = System.getenv("CURSEFORGE_TOKEN") != null
tasks.curseforge.group = 'publishing'
curseforge {
    apiKey = System.getenv("CURSEFORGE_TOKEN") != null ? System.getenv("CURSEFORGE_TOKEN") : "empty"
    project {
        id = project.curse_id
        changelog = getChangelogText()
        changelogType = "markdown"
        addGameVersion project.minecraft_version
        addGameVersion "Forge"
        addGameVersion "NeoForge"
        releaseType = project.release_type
        mainArtifact(tasks.getByName('jarJar').archiveFile) {
            
        }
        relations {
            requiredLibrary "creativecore"
        }
    }
}
